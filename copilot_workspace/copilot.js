/**\n * TH_e_ART_h_MAN - AI Copilot Workspace JavaScript\n * Advanced Stable Diffusion Prompt Generation Interface\n */\n\nclass AICopilotInterface {\n    constructor() {\n        this.currentModel = 'main';\n        this.currentStyle = 'photo';\n        this.currentQuality = 'standard';\n        this.isLoading = false;\n        this.apiBaseUrl = '/api';\n        \n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.checkConnection();\n        this.loadInitialState();\n    }\n\n    bindEvents() {\n        // Chat input events\n        document.getElementById('sendBtn').addEventListener('click', () => this.sendMessage());\n        document.getElementById('chatInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                this.sendMessage();\n            }\n        });\n\n        // Model selection\n        document.querySelectorAll('.model-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                this.selectModel(e.target.dataset.model);\n            });\n        });\n\n        // Style selection\n        document.querySelectorAll('.style-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                this.selectStyle(e.target.dataset.style);\n            });\n        });\n\n        // Quality selection\n        document.querySelectorAll('.quality-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                this.selectQuality(e.target.dataset.quality);\n            });\n        });\n\n        // Prompt enhancer\n        document.getElementById('enhanceBtn').addEventListener('click', () => this.enhancePrompt());\n    }\n\n    async checkConnection() {\n        try {\n            const response = await fetch(`${this.apiBaseUrl}/status`);\n            const data = await response.json();\n            \n            const statusEl = document.getElementById('statusIndicator');\n            if (data.ollama_connected) {\n                statusEl.innerHTML = '🟢 Ollama Connected';\n                statusEl.style.background = 'rgba(34, 197, 94, 0.2)';\n                statusEl.style.borderColor = '#22c55e';\n                statusEl.style.color = '#22c55e';\n            } else {\n                statusEl.innerHTML = '🟡 Ollama Offline - Demo Mode';\n                statusEl.style.background = 'rgba(255, 193, 7, 0.2)';\n                statusEl.style.borderColor = '#ffc107';\n                statusEl.style.color = '#ffc107';\n            }\n        } catch (error) {\n            const statusEl = document.getElementById('statusIndicator');\n            statusEl.innerHTML = '🔴 Connection Error';\n            statusEl.style.background = 'rgba(239, 68, 68, 0.2)';\n            statusEl.style.borderColor = '#ef4444';\n            statusEl.style.color = '#ef4444';\n        }\n    }\n\n    loadInitialState() {\n        // Set default active buttons\n        document.querySelector(`[data-model=\"${this.currentModel}\"]`).classList.add('active');\n        document.querySelector(`[data-style=\"${this.currentStyle}\"]`).classList.add('active');\n        document.querySelector(`[data-quality=\"${this.currentQuality}\"]`).classList.add('active');\n    }\n\n    selectModel(model) {\n        this.currentModel = model;\n        document.querySelectorAll('.model-btn').forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.model === model);\n        });\n    }\n\n    selectStyle(style) {\n        this.currentStyle = style;\n        document.querySelectorAll('.style-btn').forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.style === style);\n        });\n    }\n\n    selectQuality(quality) {\n        this.currentQuality = quality;\n        document.querySelectorAll('.quality-btn').forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.quality === quality);\n        });\n    }\n\n    async sendMessage() {\n        const input = document.getElementById('chatInput');\n        const message = input.value.trim();\n        \n        if (!message || this.isLoading) return;\n        \n        // Add user message to chat\n        this.addMessage('user', message);\n        input.value = '';\n        \n        // Show loading\n        this.setLoading(true);\n        \n        try {\n            const response = await fetch(`${this.apiBaseUrl}/chat`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    message: message,\n                    model: this.currentModel\n                })\n            });\n            \n            const data = await response.json();\n            \n            if (data.success) {\n                this.addMessage('ai', data.response);\n            } else {\n                this.addMessage('ai', `Error: ${data.error || 'Unknown error occurred'}`);\n            }\n        } catch (error) {\n            console.error('Chat error:', error);\n            this.addMessage('ai', 'Connection error. Please check if the API server is running.');\n        } finally {\n            this.setLoading(false);\n        }\n    }\n\n    async enhancePrompt() {\n        const promptInput = document.getElementById('promptInput');\n        const resultArea = document.getElementById('enhancedResult');\n        const enhanceBtn = document.getElementById('enhanceBtn');\n        \n        const basicPrompt = promptInput.value.trim();\n        \n        if (!basicPrompt) {\n            resultArea.textContent = 'Please enter a basic prompt first.';\n            return;\n        }\n        \n        // Show loading state\n        enhanceBtn.disabled = true;\n        enhanceBtn.textContent = '⏳ Enhancing...';\n        resultArea.textContent = 'Processing your prompt...';\n        \n        try {\n            const response = await fetch(`${this.apiBaseUrl}/enhance`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    prompt: basicPrompt,\n                    style: this.currentStyle,\n                    quality: this.currentQuality\n                })\n            });\n            \n            const data = await response.json();\n            \n            if (data.success) {\n                resultArea.textContent = data.enhanced_prompt;\n            } else {\n                resultArea.textContent = `Error: ${data.error || 'Enhancement failed'}`;\n            }\n        } catch (error) {\n            console.error('Enhancement error:', error);\n            resultArea.textContent = 'Connection error. Using fallback enhancement.';\n            \n            // Fallback enhancement\n            const enhanced = this.fallbackEnhance(basicPrompt);\n            resultArea.textContent = enhanced;\n        } finally {\n            enhanceBtn.disabled = false;\n            enhanceBtn.textContent = '✨ Enhance Prompt';\n        }\n    }\n\n    fallbackEnhance(prompt) {\n        const styleEnhancements = {\n            'photo': 'photorealistic, high resolution, detailed, professional photography',\n            'digital': 'digital art, detailed, vibrant colors, modern aesthetic',\n            'oil': 'oil painting, classical art style, rich textures, painterly',\n            'anime': 'anime style, detailed, vibrant colors, manga aesthetic',\n            'water': 'watercolor painting, soft colors, artistic, flowing',\n            'sketch': 'pencil sketch, detailed linework, artistic, monochrome'\n        };\n        \n        const qualityEnhancements = {\n            'standard': 'good quality, clean composition',\n            'high': 'high quality, sharp focus, detailed, professional',\n            'ultra': 'ultra high quality, 8k resolution, masterpiece, highly detailed',\n            'artistic': 'artistic masterpiece, creative composition, unique style'\n        };\n        \n        const styleText = styleEnhancements[this.currentStyle] || '';\n        const qualityText = qualityEnhancements[this.currentQuality] || '';\n        \n        return `${prompt}, ${styleText}, ${qualityText}`;\n    }\n\n    addMessage(type, content) {\n        const messagesContainer = document.getElementById('chatMessages');\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `message ${type}`;\n        \n        const timeDiv = document.createElement('div');\n        timeDiv.className = 'message-time';\n        timeDiv.textContent = type === 'user' ? 'You' : 'AI Copilot';\n        timeDiv.textContent += ` - ${new Date().toLocaleTimeString().slice(0, 5)}`;\n        \n        const contentDiv = document.createElement('div');\n        contentDiv.textContent = content;\n        \n        messageDiv.appendChild(timeDiv);\n        messageDiv.appendChild(contentDiv);\n        messagesContainer.appendChild(messageDiv);\n        \n        // Scroll to bottom\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    setLoading(loading) {\n        this.isLoading = loading;\n        const sendBtn = document.getElementById('sendBtn');\n        const chatInput = document.getElementById('chatInput');\n        \n        sendBtn.disabled = loading;\n        chatInput.disabled = loading;\n        \n        if (loading) {\n            sendBtn.textContent = '⏳';\n        } else {\n            sendBtn.textContent = 'Send ➤';\n        }\n    }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new AICopilotInterface();\n});